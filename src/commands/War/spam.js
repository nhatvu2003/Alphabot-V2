/**
 * @fileoverview Spam Command - G·ª≠i tin nh·∫Øn li√™n t·ª•c
 * @author NhatCoder (Updated from Th√†nh V≈©)
 * @version 2.0.0
 * @license MIT
 */

export const config = {
  name: "spam",
  version: "2.0.0",
  aliases: ['spamv1', 'spv1', 'spam1'],
  description: "G·ª≠i tin nh·∫Øn l·∫∑p l·∫°i li√™n t·ª•c v·ªõi n·ªôi dung t√πy ch·ªânh",
  usage: "[n·ªôi dung] ho·∫∑c stop",
  permissions: [2], // Ch·ªâ admin ƒë∆∞·ª£c s·ª≠ d·ª•ng
  cooldown: 3,
  isAbsolute: false,
  isHidden: false,
  category: "War",
  credits: "NhatCoder",
  extra: {
    delay: 2000 // Delay 2s gi·ªØa c√°c tin nh·∫Øn ƒë·ªÉ tr√°nh b·ªã kh√≥a
  }
};
// Initialize global spam tracking
if (!global.Spam) {
  global.Spam = new Set();
}

/**
 * Main spam command execution function
 * @param {Object} param0 - Command parameters
 * @param {Object} param0.message - Message event object
 * @param {Array} param0.args - Command arguments
 */
export async function run({ message, args }) {
  const { threadID, messageID } = message;

  // Validate inputs
  if (!threadID) {
    return message.reply('‚ùå L·ªói: Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ID nh√≥m!');
  }

  // Handle stop command
  const isStop = args[0]?.toLowerCase() === 'stop';
  if (isStop) {
    if (global.Spam.has(threadID)) {
      global.Spam.delete(threadID);
      return message.reply('‚úÖ ƒê√£ d·ª´ng spam th√†nh c√¥ng!');
    } else {
      return message.reply('‚ö†Ô∏è Kh√¥ng c√≥ spam n√†o ƒëang ch·∫°y trong nh√≥m n√†y!');
    }
  }

  // Get spam content
  const spamContent = args.join(' ').trim();
  if (!spamContent) {
    return message.reply(
      '‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung c·∫ßn spam!\nüí° S·ª≠ d·ª•ng: /spam [n·ªôi dung] ho·∫∑c /spam stop'
    );
  }

  // Check if already spamming
  if (global.Spam.has(threadID)) {
    return message.reply('‚ö†Ô∏è ƒê√£ c√≥ spam ƒëang ch·∫°y trong nh√≥m n√†y! S·ª≠ d·ª•ng "/spam stop" ƒë·ªÉ d·ª´ng.');
  }

  try {
    // Start spam session
    global.Spam.add(threadID);

    // Send confirmation
    message.send(`üî• B·∫Øt ƒë·∫ßu spam: "${spamContent}"\n‚ö†Ô∏è S·ª≠ d·ª•ng "/spam stop" ƒë·ªÉ d·ª´ng.`);

    // Spam loop
    while (global.Spam.has(threadID)) {
      try {
        await message.send(spamContent);
        await new Promise(resolve => setTimeout(resolve, config.extra.delay));
      } catch (error) {
        // Stop spam on error to prevent spam flood
        global.Spam.delete(threadID);
        message.send('‚ùå ƒê√£ d·ª´ng spam do l·ªói g·ª≠i tin nh·∫Øn!');
        break;
      }
    }
  } catch (error) {
    global.Spam.delete(threadID);
    message.reply('‚ùå C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán spam!');
  }
}

// Alias for backward compatibility
export const Running = run;

export default {
  config,
  Running
}
